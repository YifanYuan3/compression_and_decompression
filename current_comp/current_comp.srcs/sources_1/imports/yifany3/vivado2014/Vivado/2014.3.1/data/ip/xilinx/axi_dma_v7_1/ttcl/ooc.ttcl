<: ;#Component and file information :>
<: setFileUsedIn [list out_of_context synthesis implementation] :>
<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory "./" :>
<: setFileName [ttcl_string_concat $ComponentName "_ooc"] :>
<: setFileExtension ".xdc" :>
<: set enable_mm2s [getBooleanValue "c_include_mm2s"] :>
<: set enable_s2mm [getBooleanValue "c_include_s2mm"] :>
<: set enable_async [getBooleanValue "c_prmry_is_aclk_async"] :>
<: set enable_sg [getBooleanValue "c_include_sg"] :>
<: set lite_clk 100000000 :>
<: set sg_clk 100000000 :>
<: set mm2s_clk 100000000 :>
<: set s2mm_clk 100000000 :>
<: set lite_per_d [expr 1000000000.0 / $lite_clk] :>
<: set sg_per_d [expr 1000000000.0 / $sg_clk] :>
<: set mm2s_per_d [expr 1000000000.0 / $mm2s_clk] :>
<: set s2mm_per_d [expr 1000000000.0 / $s2mm_clk] :>
<: set lite_per_i [::tcl::mathfunc::int [::tcl::mathfunc::round [expr 1000 * $lite_per_d]]] :>
<: set sg_per_i [::tcl::mathfunc::int [::tcl::mathfunc::round [expr 1000 * $sg_per_d]]] :>
<: set mm2s_per_i [::tcl::mathfunc::int [::tcl::mathfunc::round [expr 1000 * $mm2s_per_d]]] :>
<: set s2mm_per_i [::tcl::mathfunc::int [::tcl::mathfunc::round [expr 1000 * $s2mm_per_d]]] :>
<: set lite_per [expr $lite_per_i / 1000.0] :>
<: set sg_per [expr $sg_per_i / 1000.0] :>
<: set mm2s_per [expr $mm2s_per_i / 1000.0] :>
<: set s2mm_per [expr $s2mm_per_i / 1000.0] :>
# (c) Copyright 2009 - 2013 Xilinx, Inc. All rights reserved.
# 
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
# 
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
# 
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
# 
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.


# This XDC is used only for OOC mode of synthesis, implementation
# User should update the correct clock period before proceeding further
<: if {$enable_mm2s} { :>
<: set mm2s_clk "m_axi_mm2s_aclk" :>
<: } else { :>
<: set mm2s_clk "" :>
<: } :>
<: if {$enable_s2mm} { :>
<: set s2mm_clk "m_axi_s2mm_aclk" :>
<: } else { :>
<: set s2mm_clk "" :>
<: } :>
<: if {$enable_sg} { :>
<: set sg_clk "m_axi_sg_aclk" :>
<: } else { :>
<: set sg_clk "" :>
<: } :>

<: if {$enable_async} { :>
 create_clock -name s_axi_lite_aclk -period 50 [get_ports s_axi_lite_aclk]
 set_property HD.CLK_SRC BUFGCTRL_X0Y0 [get_ports s_axi_lite_aclk]
<: if {$enable_mm2s} { :>
 create_clock -name m_axi_mm2s_aclk -period 30 [get_ports m_axi_mm2s_aclk]
 set_property HD.CLK_SRC BUFGCTRL_X0Y1 [get_ports m_axi_mm2s_aclk]
<: } :>
<: if {$enable_s2mm} { :>
 create_clock -name m_axi_s2mm_aclk -period 30 [get_ports m_axi_s2mm_aclk]
 set_property HD.CLK_SRC BUFGCTRL_X0Y2 [get_ports m_axi_s2mm_aclk]
<: } :>
<: if {$enable_sg} { :>
 create_clock -name m_axi_sg_aclk -period 40 [get_ports m_axi_sg_aclk]
 set_property HD.CLK_SRC BUFGCTRL_X0Y3 [get_ports m_axi_sg_aclk]
<: } :>
<: } else { :>
 create_clock -name all_clock -period 10 [get_ports {s_axi_lite_aclk <=: $mm2s_clk :> <=: $s2mm_clk :> <=: $sg_clk :>}]
 set_property HD.CLK_SRC BUFGCTRL_X0Y0 [get_ports s_axi_lite_aclk]
<: if {$enable_mm2s} { :>
# create_clock -name m_axi_mm2s_aclk -period 10 [get_ports <=: $mm2s_clk :>]
 set_property HD.CLK_SRC BUFGCTRL_X0Y1 [get_ports m_axi_mm2s_aclk]
<: } :>
<: if {$enable_s2mm} { :>
# create_clock -name m_axi_s2mm_aclk -period 10 [get_ports m_axi_s2mm_aclk]
 set_property HD.CLK_SRC BUFGCTRL_X0Y2 [get_ports m_axi_s2mm_aclk]
<: } :>
<: if {$enable_sg} { :>
# create_clock -name m_axi_sg_aclk -period 10 [get_ports m_axi_sg_aclk]
 set_property HD.CLK_SRC BUFGCTRL_X0Y3 [get_ports m_axi_sg_aclk]
<: } :>
<: } :>
